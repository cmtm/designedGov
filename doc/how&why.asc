= The how and why of designedGov

== What is this document?

I've described my motivations for creating designedGov and what I 
hope to accomplish with designedGov project. I've also discussed how 
designGov solves current real world problems. 

The protocol itself has been specified and I created a reference 
implementation, including clients, hosts and a certificate authority.

This document is an effort to show how the system comes together and 
why I designed it to be as it is. I've written much attempting to 
justify the need for system itself, but justifications for the design 
are lacking.

My main method will be describing and discussing use cases. I've 
attempted to do so in previous documents but they didn't justify my 
design decisions. After having created a full reference 
implementation, there are some things I've changed and there are 
still many more things I've noticed can be improved but won't be in 
this iteration.


== Recap: 

=== What designedGov seeks to do:

Give individuals and organizations (users) better access to their 
own information. This can be a patient's health records, a 
tax-payer's tax history or consumer's credit-card history.

Replace the current tedious, complex, error-prone and dangerous 
(from a security standpoint) way of moving this information around 
with a better one. Make this system automatable and transparent.

=== What we need to do this

Establish a way for users to securely authenticate 
their own identity to anyone else, without the need of a third party 
or prior shared information.

	To accomplish this, we use a public-key cryptography system with a 
	single certificate authority. This certificate authority is run by the 
	federal government. Each user will receive a signed certififate 
	bonding their unique user ID to their public key. When a user 
	whishes to communicate with another user, they can open a TLS 
	connection and exchange their signed certificates for 
	authentication.


A secure protocol for securely communicating arbitrary information between 
persons and organizations.

	The protocol I designed to accomplish this is detailed in 
	another document. It work by users exchanging objects called 
	dgobs. A dgob can be one of various types such as a request. The 
	initiating user (client) can send a request dgob to another user 
	(server) inorder to trigger an action or retrieve information. The 
	server verifies the client has necessary authority and replies to 
	the client with a response dgob appropriately.

An user friendly interface to allow users to communicate over this 
protocol.
	
	Although human-readable, dgob objects aren't mean't to be written 
	by humans. Instead, a human interacts with a program on a device 
	that he trusts which creates, exchanges and interprets dgobs on 
	his behalf.

Have organizations interact with their clients through a designedGov 
server.

	Instead of using their own identity systems and communication 
	methods, organizations will rely on authentication offered by the 
	designedGov system and communicate with clients in compliance with 
	the designedGov protocol. 

=== Justification of designed descisions & use cases

It is assumed that the reader has read the designedGov specification 
documents.

As described before, desingedGov is not a single protocol, but a 
stack. This is to allow flexibility in both the initial designed of 
designedGov and futur, unforseen changes. A stack approach allows any 
layer to be replaced (as long as it's function is still fulfilled)
without severely disrupting the others. Following is the protocol 
stack, with each layer depending on the functionality of those under 
it.

[graphviz]
---------------------------------------------------------------------
digraph G {
	"Client interface" -> "Server applications" -> "Communication protocol" -> "Certificate Authority" -> "User definition";
}
---------------------------------------------------------------------

Typical designedGov transactions use all layers with the exception of the 
top one which isn't used when exchanges are automated. Let's take a 
look at a simple transaction in [TODO: reference to pic]: of a person querying a server for a 
certain piece of information on his account that he has access to.

TODO: INSERT SIMPLE TRANSACTION DIAGRAM

The transaction in [TODO: ref pic] is simpler than it looks at first 
glance: a lot of what is going on is 
